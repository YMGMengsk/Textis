package application;

import javafx.application.Platform;
import javafx.scene.Scene;
import javafx.scene.control.ProgressBar;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.BorderPane;
import javafx.stage.Stage;
import javafx.stage.StageStyle;

import java.io.File;
import java.io.IOException;

import javax.sound.sampled.*;

public class SplashScreen {

    private Stage splashStage;
    private ProgressBar progressBar; // Objekt zum darstellen des Ladebalkens

    public SplashScreen() {
        splashStage = new Stage();
        splashStage.initStyle(StageStyle.UNDECORATED); //Undecorated, bedeutet das das Fenster keine "Dekoratio" hat, also keine Rahmen, title, etc.

        BorderPane root = new BorderPane();
        ImageView splashImage = new ImageView(new Image("file:C:\\Users\\020700012023\\OneDrive - CGM\\Desktop\\Textis\\Logo_LoadScreen.png")); // Hier den Pfad zum Bild anpassen
        splashImage.setFitWidth(400); // Setzen der Breite
        splashImage.setFitHeight(200); // Setzen der Höhe
        splashImage.setPreserveRatio(true); // Verhältnis beibehalten
        root.setCenter(splashImage); // Plazieren des Bildes

        progressBar = new ProgressBar(); // Hinzufügen des Ladebalkens
        progressBar.setPrefWidth(500); // die Breite des Ladebalkens anpassen
        root.setBottom(progressBar); // Plazieren des Ladebalkens

        Scene scene = new Scene(root, 500, 300);
        splashStage.setScene(scene);
        
       playSound("/audio/startsound.wav");
    }

    public void show() { // Zeigt das Ladefenster an
        splashStage.show();
    }

    public void hide() { // Vertseckt das ladefensterS
        splashStage.hide();
    }

    public void updateProgress(double progress) {
        Platform.runLater(() -> progressBar.setProgress(progress));
    }
    
    private void playSound(String soundFilePath) {
        new Thread(() -> {
            try {
                Clip clip = AudioSystem.getClip();
                AudioInputStream inputStream = AudioSystem.getAudioInputStream(getClass().getResource(soundFilePath));
                clip.open(inputStream);
                clip.start();
            } catch (UnsupportedAudioFileException | IOException | LineUnavailableException e) {
                e.printStackTrace();
            }
        }).start();
    }
    	
    }
    
